// popup.js - –ø–æ–ª–Ω—ã–π –∫–æ–¥ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –Ω–∞–∑–≤–∞–Ω–∏–π –∏ –≤–∫–ª–∞–¥–∫–æ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
let currentTab = 'current';

function formatTime(timestamp) {
    const now = Date.now();
    const diff = now - timestamp;

    if (diff < 60000) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    if (diff < 3600000) return `${Math.floor(diff / 60000)} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    if (diff < 86400000) return `${Math.floor(diff / 3600000)} —á –Ω–∞–∑–∞–¥`;

    const date = new Date(timestamp);
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);

    if (date.toDateString() === today.toDateString()) {
        return `—Å–µ–≥–æ–¥–Ω—è –≤ ${date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`;
    } else if (date.toDateString() === yesterday.toDateString()) {
        return `–≤—á–µ—Ä–∞ –≤ ${date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`;
    } else {
        return date.toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'short',
            hour: '2-digit',
            minute: '2-digit'
        });
    }
}

function updateCurrentTab(data) {
    const container = document.getElementById('animeInfo');

    if (!data || (Date.now() - data.timestamp) > 600000) {
        container.innerHTML = `
      <div class="empty-state">
        <div class="empty-icon">üì∫</div>
        <div class="empty-title">–ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>
        <div class="empty-description">
          –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∏–º–µ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Å–∞–π—Ç–µ
        </div>
        <div style="margin-top: 12px; font-size: 11px; color: var(--text-secondary);">
          –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–∞–π—Ç—ã: animego.me, jut.su, anilibria.tv –∏ –¥—Ä—É–≥–∏–µ
        </div>
      </div>
    `;
        return;
    }

    const timeAgo = formatTime(data.timestamp);
    const domain = getDomain(data.url);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º rawTitle –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–π title
    const displayTitle = data.rawTitle || data.title;

    const coverHtml = data.cover ?
        `<div class="cover-container">
      <img class="anime-cover" src="${data.cover}" alt="–û–±–ª–æ–∂–∫–∞ ${escapeHtml(displayTitle)}" 
          loading="lazy"
          onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
      <div class="anime-cover empty" style="display: none;">
        <div class="cover-placeholder">üé¨</div>
      </div>
    </div>` :
        `<div class="anime-cover empty">
      <div class="cover-placeholder">üé¨</div>
    </div>`;

    container.innerHTML = `
    <div class="anime-card">
      <div class="anime-header">
        ${coverHtml}
        <div class="anime-info">
          <div class="anime-title" title="${escapeHtml(displayTitle)}">${escapeHtml(displayTitle)}</div>
          
          <div class="info-grid">
            <div class="info-item">
              <div class="info-label">–°–µ–∑–æ–Ω</div>
              <div class="info-value">${data.season}</div>
            </div>
            <div class="info-item">
              <div class="info-label">–≠–ø–∏–∑–æ–¥</div>
              <div class="episode-badge">${data.episode}</div>
            </div>
          </div>
          
          <div class="additional-info">
            <div class="info-row">
              <span class="info-label">–°–∞–π—Ç:</span>
              <span class="info-value">${domain}</span>
            </div>
          </div>
          
          <div class="status">
            <div class="status-dot"></div>
            <span class="status-text">–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${timeAgo}</span>
          </div>
        </div>
      </div>
      
      <div class="action-buttons">
        <button class="btn btn-secondary" id="openSite">
          <span class="btn-icon"><svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
  <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"/>
  <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"/>
</svg></span>
          <span class="btn-text">–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç</span>
        </button>
        <button class="btn btn-primary" id="addToTracking">
          <span class="btn-icon"><svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
  <line x1="12" y1="5" x2="12" y2="19"/>
  <line x1="5" y1="12" x2="19" y2="12"/>
</svg></span>
          <span class="btn-text">–í —Å–ø–∏—Å–æ–∫</span>
        </button>
      </div>
      
      <div class="quick-actions">
        <button class="quick-btn" id="refreshData" title="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ">
          <span><svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
  <path d="M23 4v6h-6"/>
  <path d="M1 20v-6h6"/>
  <path d="M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"/>
</svg></span>
        </button>
        <button class="quick-btn" id="copyInfo" title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é">
          <span><svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
  <rect x="9" y="9" width="13" height="13" rx="2" ry="2"/>
  <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"/>
</svg></span>
        </button>
      </div>
    </div>
  `;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–Ω–∏–º–µ
    document.getElementById('openSite').addEventListener('click', () => {
        chrome.tabs.create({ url: data.url });
    });

    document.getElementById('addToTracking').addEventListener('click', () => {
        addToTrackingList(data);
    });

    document.getElementById('refreshData').addEventListener('click', () => {
        refreshCurrentTab();
    });

    document.getElementById('copyInfo').addEventListener('click', () => {
        copyAnimeInfo(data);
    });
}

function updateHistoryTab() {
    chrome.storage.local.get(['watchHistory'], (result) => {
        const history = result.watchHistory || [];
        const container = document.getElementById('historyList');

        if (history.length === 0) {
            container.innerHTML = `
        <div class="empty-state">
          <div class="empty-icon">üìö</div>
          <div class="empty-title">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</div>
          <div class="empty-description">
            –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å<br>
            –ù–∞—á–Ω–∏—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∏–º–µ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–∞–π—Ç–∞—Ö
          </div>
        </div>
      `;
            return;
        }

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const stats = calculateHistoryStats(history);

        container.innerHTML = `
      <div class="history-stats">
        <div class="stat-item">
          <div class="stat-number">${stats.totalWatched}</div>
          <div class="stat-label">–í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</div>
        </div>
        <div class="stat-item">
          <div class="stat-number">${stats.uniqueTitles}</div>
          <div class="stat-label">–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∞–π—Ç–ª–æ–≤</div>
        </div>
        <div class="stat-item">
          <div class="stat-number">${stats.totalEpisodes}</div>
          <div class="stat-label">–≠–ø–∏–∑–æ–¥–æ–≤</div>
        </div>
      </div>
      <div class="history-items" id="historyItems">
        ${history.slice(0, 50).map(item => createHistoryItem(item)).join('')}
      </div>
    `;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏
        addHistoryEventListeners(history);
    });
}

function createHistoryItem(item) {
    const timeAgo = formatTime(item.timestamp);
    const domain = getDomain(item.url);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º rawTitle –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
    const displayTitle = item.rawTitle || item.title;

    const coverHtml = item.cover ?
        `<div class="cover-container">
      <img class="history-cover" src="${item.cover}" alt="–û–±–ª–æ–∂–∫–∞ ${escapeHtml(displayTitle)}" 
          loading="lazy"
          onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
      <div class="history-cover empty" style="display: none;">
        <div class="cover-placeholder">üé¨</div>
      </div>
    </div>` :
        `<div class="history-cover empty">
      <div class="cover-placeholder">üé¨</div>
    </div>`;

    return `
    <div class="history-item" data-id="${item.id}">
      ${coverHtml}
      <div class="history-content-inner">
        <div class="history-details">
          <div class="history-title" title="${escapeHtml(displayTitle)}">${escapeHtml(displayTitle)}</div>
          <div class="history-meta">
            <span class="history-episode">S${item.season} E${item.episode}</span>
            <span class="history-domain">${domain}</span>
          </div>
          <div class="history-time">${timeAgo}</div>
        </div>
        <div class="history-actions">
          <button class="btn-small open" data-url="${item.url}" title="–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ">
            <span class="btn-icon"><svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
  <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"/>
  <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"/>
</svg></span>
          </button>
          <button class="btn-small delete" data-id="${item.id}" title="–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏">
            <span class="btn-icon"><svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
  <polyline points="3 6 5 6 21 6"/>
  <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/>
</svg></span>
          </button>
        </div>
      </div>
    </div>
  `;
}

function addHistoryEventListeners(history) {
    const container = document.getElementById('historyItems');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç—å"
    container.querySelectorAll('.btn-small.open').forEach(btn => {
        btn.addEventListener('click', (e) => {
            e.stopPropagation();
            const url = btn.getAttribute('data-url');
            chrome.tabs.create({ url });
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å"
    container.querySelectorAll('.btn-small.delete').forEach(btn => {
        btn.addEventListener('click', (e) => {
            e.stopPropagation();
            const id = btn.getAttribute('data-id');
            removeFromHistory(id);
        });
    });

    // –ö–ª–∏–∫ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ –∏—Å—Ç–æ—Ä–∏–∏ (–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–∞–π—Ç)
    container.querySelectorAll('.history-item').forEach(item => {
        item.addEventListener('click', (e) => {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
            if (!e.target.closest('.btn-small')) {
                const id = item.getAttribute('data-id');
                const historyItem = history.find(h => h.id === id);
                if (historyItem) {
                    chrome.tabs.create({ url: historyItem.url });
                }
            }
        });
    });
}

function updateTrackingTab() {
    chrome.storage.local.get(['trackingList'], (result) => {
        const trackingList = result.trackingList || [];
        const container = document.getElementById('trackingList');

        if (trackingList.length === 0) {
            container.innerHTML = `
        <div class="empty-state">
          <div class="empty-icon"><svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
  <rect x="9" y="9" width="13" height="13" rx="2" ry="2"/>
  <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"/>
</svg></div>
          <div class="empty-title">–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Å—Ç</div>
          <div class="empty-description">
            –î–æ–±–∞–≤—å—Ç–µ –∞–Ω–∏–º–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞<br>
            –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ" –∏–ª–∏ "–í —Å–ø–∏—Å–æ–∫" –≤ —Ç–µ–∫—É—â–µ–º –∞–Ω–∏–º–µ
          </div>
        </div>
      `;
            return;
        }

        container.innerHTML = trackingList.map(item => createTrackingItem(item)).join('');

        addTrackingEventListeners(trackingList);
    });
}

function createTrackingItem(item) {
    const progress = calculateProgress(item);
    const addedTime = formatTime(item.addedAt);
    const isCompleted = item.status === 'completed';

    const displayTitle = item.rawTitle || item.title;

    const coverHtml = item.cover ?
        `<div class="cover-container">
      <img class="tracking-cover" src="${item.cover}" alt="–û–±–ª–æ–∂–∫–∞ ${escapeHtml(displayTitle)}" 
          loading="lazy"
          onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
      <div class="tracking-cover empty" style="display: none;">
        <div class="cover-placeholder">üé¨</div>
      </div>
    </div>` :
        `<div class="tracking-cover empty">
      <div class="cover-placeholder">üé¨</div>
    </div>`;

    return `
    <div class="tracking-item ${isCompleted ? 'completed' : ''}" data-id="${item.id}">
      ${isCompleted ? '<div class="completed-badge">‚úîÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>' : ''}
      ${coverHtml}
      <div class="tracking-info">
        <div class="tracking-title" title="${escapeHtml(displayTitle)}">${escapeHtml(displayTitle)}</div>
        
        <div class="tracking-progress">
          <div class="progress-info">
            <span>–ü—Ä–æ–≥—Ä–µ—Å—Å:</span>
            <span>${item.currentEpisode} / ${item.totalEpisodes}</span>
          </div>
          <div class="progress-bar">
            <div class="progress-fill" style="width: ${progress}%"></div>
          </div>
        </div>
        
        <div class="tracking-meta">
          <span>–°–µ–∑–æ–Ω ${item.season}</span>
          <span>–î–æ–±–∞–≤–ª–µ–Ω–æ: ${addedTime}</span>
        </div>
        
        <div class="tracking-actions">
          <button class="btn-small primary" data-id="${item.id}" data-action="increment" title="–£–≤–µ–ª–∏—á–∏—Ç—å —ç–ø–∏–∑–æ–¥" ${isCompleted ? 'disabled' : ''}>
            <span class="btn-icon"><svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
  <line x1="12" y1="5" x2="12" y2="19"/>
  <line x1="5" y1="12" x2="19" y2="12"/>
</svg></span>
          </button>
          <button class="btn-small warning" data-id="${item.id}" data-action="decrement" title="–£–º–µ–Ω—å—à–∏—Ç—å —ç–ø–∏–∑–æ–¥" ${isCompleted ? 'disabled' : ''}>
            <span class="btn-icon"><svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
  <line x1="5" y1="12" x2="19" y2="12"/>
</svg></span>
          </button>
          <button class="btn-small" data-id="${item.id}" data-action="edit" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
            <span class="btn-icon"><svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
  <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>
  <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"/>
</svg></span>
          </button>
          <button class="btn-small delete" data-id="${item.id}" data-action="delete" title="–£–¥–∞–ª–∏—Ç—å –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è">
            <span class="btn-icon"><svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
  <polyline points="3 6 5 6 21 6"/>
  <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/>
</svg></span>
          </button>
        </div>
      </div>
    </div>
  `;
}

function calculateProgress(item) {
    const current = parseInt(item.currentEpisode) || 0;
    const total = parseInt(item.totalEpisodes) || 1;
    if (total === 0 || total === '?') return 0;
    return Math.min(100, Math.round((current / total) * 100));
}

function addTrackingEventListeners(trackingList) {
    const container = document.getElementById('trackingList');

    container.querySelectorAll('.btn-small').forEach(btn => {
        btn.addEventListener('click', (e) => {
            e.stopPropagation();
            const id = btn.getAttribute('data-id');
            const action = btn.getAttribute('data-action');

            switch (action) {
                case 'increment':
                    incrementEpisode(id);
                    break;
                case 'decrement':
                    decrementEpisode(id);
                    break;
                case 'edit':
                    editTrackingItem(id);
                    break;
                case 'delete':
                    removeFromTracking(id);
                    break;
            }
        });
    });

    container.querySelectorAll('.tracking-item').forEach(item => {
        item.addEventListener('click', (e) => {
            if (!e.target.closest('.btn-small')) {
                const id = item.getAttribute('data-id');
                const trackingItem = trackingList.find(t => t.id === id);
                if (trackingItem) {
                    const searchUrl = `https://www.google.com/search?q=${encodeURIComponent(trackingItem.title + ' –∞–Ω–∏–º–µ')}`;
                    chrome.tabs.create({ url: searchUrl });
                }
            }
        });
    });
}

function incrementEpisode(id) {
    chrome.storage.local.get(['trackingList'], (result) => {
        const trackingList = result.trackingList || [];
        const itemIndex = trackingList.findIndex(item => item.id === id);
        if (itemIndex !== -1) {
            const currentEpisode = parseInt(trackingList[itemIndex].currentEpisode) || 0;
            trackingList[itemIndex].currentEpisode = (currentEpisode + 1).toString();
            chrome.storage.local.set({ trackingList }, () => {
                updateTrackingTab();
                showNotification('–≠–ø–∏–∑–æ–¥ —É–≤–µ–ª–∏—á–µ–Ω');
            });
        }
    });
}

function decrementEpisode(id) {
    chrome.storage.local.get(['trackingList'], (result) => {
        const trackingList = result.trackingList || [];
        const itemIndex = trackingList.findIndex(item => item.id === id);
        if (itemIndex !== -1) {
            const currentEpisode = parseInt(trackingList[itemIndex].currentEpisode) || 0;
            if (currentEpisode > 0) {
                trackingList[itemIndex].currentEpisode = (currentEpisode - 1).toString();
                chrome.storage.local.set({ trackingList }, () => {
                    updateTrackingTab();
                    showNotification('–≠–ø–∏–∑–æ–¥ —É–º–µ–Ω—å—à–µ–Ω');
                });
            }
        }
    });
}

function editTrackingItem(id) {
    chrome.storage.local.get(['trackingList'], (result) => {
        const trackingList = result.trackingList || [];
        const itemIndex = trackingList.findIndex(item => item.id === id);
        if (itemIndex !== -1) {
            const item = trackingList[itemIndex];
            const newTotal = prompt(`–í–≤–µ–¥–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤ –¥–ª—è "${item.rawTitle || item.title}":`, item.totalEpisodes);
            if (newTotal !== null) {
                trackingList[itemIndex].totalEpisodes = newTotal;
                chrome.storage.local.set({ trackingList }, () => {
                    updateTrackingTab();
                    showNotification('–û–±–Ω–æ–≤–ª–µ–Ω–æ');
                });
            }
        }
    });
}

function removeFromTracking(id) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –∞–Ω–∏–º–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è?')) {
        chrome.storage.local.get(['trackingList'], (result) => {
            const trackingList = result.trackingList || [];
            const updatedList = trackingList.filter(item => item.id !== id);
            chrome.storage.local.set({ trackingList: updatedList }, () => {
                updateTrackingTab();
                showNotification('–£–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è');
            });
        });
    }
}

function calculateHistoryStats(history) {
    const totalWatched = history.length;

    // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∞–π—Ç–ª–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
    const titleMap = new Map();

    history.forEach(item => {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        const key = normalizeTitleForGrouping(item.title);
        if (!titleMap.has(key)) {
            titleMap.set(key, {
                count: 0,
                rawTitle: item.rawTitle || item.title // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            });
        }
        titleMap.get(key).count++;
    });

    const uniqueTitles = titleMap.size;
    const totalEpisodes = history.reduce((sum, item) => sum + 1, 0);

    return {
        totalWatched,
        uniqueTitles,
        totalEpisodes,
        titleMap // –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    };
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ
function normalizeTitleForGrouping(title) {
    if (!title) return '';

    return title
        .toLowerCase()
        .replace(/[^\w\s–∞-—è—ë]/gi, '') // –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        .replace(/\s+/g, ' ')
        .trim();
}

function removeFromHistory(id) {
    chrome.storage.local.get(['watchHistory'], (result) => {
        const history = result.watchHistory || [];
        const updatedHistory = history.filter(item => item.id !== id);
        chrome.storage.local.set({ watchHistory: updatedHistory }, () => {
            updateHistoryTab();
            showNotification('–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏');
        });
    });
}

function addToTrackingList(data) {
    chrome.storage.local.get(['trackingList'], (result) => {
        const trackingList = result.trackingList || [];

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        const existingIndex = trackingList.findIndex(item =>
            item.title === data.title && item.season === data.season
        );

        if (existingIndex === -1) {
            const trackItem = {
                id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
                title: data.title, // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                rawTitle: data.rawTitle || data.title, // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                season: data.season,
                currentEpisode: data.episode,
                totalEpisodes: '?',
                cover: data.cover,
                addedAt: Date.now(),
                status: 'watching'
            };

            trackingList.unshift(trackItem);
            chrome.storage.local.set({ trackingList }, () => {
                showNotification(`"${data.rawTitle || data.title}" –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è`);
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                switchToTab('tracking');
            });
        } else {
            showNotification('–≠—Ç–æ –∞–Ω–∏–º–µ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è');
        }
    });
}

function refreshCurrentTab() {
    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
        if (tabs[0]?.id) {
            chrome.scripting.executeScript({
                target: { tabId: tabs[0].id },
                files: ['content.js']
            }).then(() => {
                showNotification('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è...');
                setTimeout(() => {
                    chrome.storage.local.get(['currentAnime'], (result) => {
                        updateCurrentTab(result.currentAnime);
                    });
                }, 2000);
            }).catch(() => {
                showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
            });
        }
    });
}

function copyAnimeInfo(data) {
    const displayTitle = data.rawTitle || data.title;
    const text = `–ê–Ω–∏–º–µ: ${displayTitle}\n–°–µ–∑–æ–Ω: ${data.season}\n–≠–ø–∏–∑–æ–¥: ${data.episode}\n–°—Å—ã–ª–∫–∞: ${data.url}`;

    navigator.clipboard.writeText(text).then(() => {
        showNotification('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä');
    }).catch(() => {
        // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ clipboard API
        const textArea = document.createElement('textarea');
        textArea.value = text;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        showNotification('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä');
    });
}

function clearHistory() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        chrome.storage.local.set({ watchHistory: [] }, () => {
            updateHistoryTab();
            showNotification('–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞');
        });
    }
}

function clearTracking() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        chrome.storage.local.set({ trackingList: [] }, () => {
            updateTrackingTab();
            showNotification('–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—á–∏—â–µ–Ω');
        });
    }
}

function switchToTab(tabName) {
    document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
    document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));

    document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
    document.getElementById(tabName + 'Tab').classList.add('active');
    currentTab = tabName;

    if (tabName === 'history') {
        updateHistoryTab();
    } else if (tabName === 'tracking') {
        updateTrackingTab();
    }
}

function getDomain(url) {
    try {
        const domain = new URL(url).hostname.replace('www.', '');
        return domain.length > 20 ? domain.substring(0, 17) + '...' : domain;
    } catch {
        return 'unknown';
    }
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function showNotification(message) {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.textContent = message;
    notification.style.cssText = `
    position: fixed;
    top: 10px;
    right: 10px;
    background: var(--success);
    color: white;
    padding: 8px 12px;
    border-radius: 6px;
    font-size: 12px;
    z-index: 10000;
    max-width: 200px;
    word-wrap: break-word;
  `;

    document.body.appendChild(notification);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
        }
    }, 3000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è popup
document.addEventListener('DOMContentLoaded', () => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    chrome.storage.local.get(['currentAnime'], (result) => {
        updateCurrentTab(result.currentAnime);
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    updateHistoryTab();
    updateTrackingTab();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', () => {
            const tabName = tab.getAttribute('data-tab');
            switchToTab(tabName);
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    document.getElementById('clearHistory').addEventListener('click', clearHistory);
    document.getElementById('refreshHistory').addEventListener('click', updateHistoryTab);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏
    document.getElementById('addCurrentToTracking').addEventListener('click', () => {
        chrome.storage.local.get(['currentAnime'], (result) => {
            if (result.currentAnime) {
                addToTrackingList(result.currentAnime);
            } else {
                showNotification('–ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∞–Ω–∏–º–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
            }
        });
    });
    document.getElementById('clearTracking').addEventListener('click', clearTracking);
});

// –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ background script
chrome.storage.onChanged.addListener((changes) => {
    if (changes.currentAnime && currentTab === 'current') {
        updateCurrentTab(changes.currentAnime.newValue);
    }
    if (changes.watchHistory && currentTab === 'history') {
        updateHistoryTab();
    }
    if (changes.trackingList && currentTab === 'tracking') {
        updateTrackingTab();
    }
});