// background.js
chrome.runtime.onInstalled.addListener(() => {
  console.log('AniTracker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  chrome.storage.local.get(['watchHistory', 'trackingList', 'settings'], (result) => {
    if (!result.watchHistory) {
      chrome.storage.local.set({ watchHistory: [] });
    }
    if (!result.trackingList) {
      chrome.storage.local.set({ trackingList: [] });
    }
    if (!result.settings) {
      chrome.storage.local.set({ 
        settings: {
          autoUpdateProgress: true,
          showNotifications: true,
          maxHistoryItems: 1000
        }
      });
    }
  });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
function updateTrackingProgress(data) {
  chrome.storage.local.get(['trackingList', 'settings'], (result) => {
    const trackingList = result.trackingList || [];
    const settings = result.settings || {};
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    if (!settings.autoUpdateProgress) {
      return;
    }
    
    let updated = false;
    const currentEpisode = parseInt(data.episode);
    
    if (isNaN(currentEpisode)) {
      console.log('[AniTracker] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞:', data.episode);
      return;
    }
    
    console.log(`[AniTracker] –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è: "${data.title}", —ç–ø–∏–∑–æ–¥ ${currentEpisode}`);
    
    trackingList.forEach(item => {
      // –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Å —É—á–µ—Ç–æ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
      if (isMatchingAnime(item, data)) {
        const trackedEpisode = parseInt(item.currentEpisode) || 0;
        
        console.log(`[AniTracker] –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: "${item.rawTitle || item.title}", —Ç–µ–∫—É—â–∏–π —ç–ø–∏–∑–æ–¥: ${trackedEpisode}, –Ω–æ–≤—ã–π: ${currentEpisode}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–≤—ã–π —ç–ø–∏–∑–æ–¥ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ
        if (currentEpisode > trackedEpisode) {
          console.log(`[AniTracker] –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: "${item.rawTitle || item.title}" —Å ${trackedEpisode} –Ω–∞ ${currentEpisode}`);
          item.currentEpisode = currentEpisode.toString();
          item.lastUpdated = Date.now();
          updated = true;
          
          // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ø–∏–∑–æ–¥–æ–≤, –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ
          if (item.totalEpisodes !== '?' && currentEpisode >= parseInt(item.totalEpisodes)) {
            item.status = 'completed';
            console.log(`[AniTracker] –ê–Ω–∏–º–µ "${item.rawTitle || item.title}" –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ`);
          }
        } else if (currentEpisode === trackedEpisode) {
          console.log(`[AniTracker] –≠–ø–∏–∑–æ–¥ ${currentEpisode} —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω –¥–ª—è "${item.rawTitle || item.title}"`);
        } else {
          console.log(`[AniTracker] –ù–æ–≤—ã–π —ç–ø–∏–∑–æ–¥ ${currentEpisode} –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ ${trackedEpisode} –¥–ª—è "${item.rawTitle || item.title}"`);
        }
      }
    });
    
    if (updated) {
      chrome.storage.local.set({ trackingList }, () => {
        console.log('[AniTracker] –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        const updatedItems = trackingList.filter(item => 
          isMatchingAnime(item, data) && parseInt(item.currentEpisode) === currentEpisode
        );
        
        if (updatedItems.length > 0 && settings.showNotifications) {
          sendProgressNotification(updatedItems[0], currentEpisode);
        }
      });
    }
  });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–Ω–∏–º–µ
function isMatchingAnime(trackingItem, currentData) {
  // –ü—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∏ —Å–µ–∑–æ–Ω–æ–≤
  if (trackingItem.title === currentData.title && trackingItem.season === currentData.season) {
    return true;
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ rawTitle (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é)
  if (trackingItem.rawTitle && currentData.rawTitle) {
    const normalizedTracking = normalizeTitleForMatching(trackingItem.rawTitle);
    const normalizedCurrent = normalizeTitleForMatching(currentData.rawTitle);
    
    if (normalizedTracking === normalizedCurrent && trackingItem.season === currentData.season) {
      return true;
    }
  }
  
  // –†–µ–∑–µ—Ä–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º (–±–µ–∑ —Å–µ–∑–æ–Ω–∞)
  const normalizedTrackingTitle = normalizeTitleForMatching(trackingItem.title);
  const normalizedCurrentTitle = normalizeTitleForMatching(currentData.title);
  
  if (normalizedTrackingTitle === normalizedCurrentTitle) {
    console.log(`[AniTracker] –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–±–µ–∑ —Å–µ–∑–æ–Ω–∞): "${trackingItem.title}" –∏ "${currentData.title}"`);
    return true;
  }
  
  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏
function normalizeTitleForMatching(title) {
  return title
    .toLowerCase()
    .replace(/[^\w\s–∞-—è—ë]/gi, '') // –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    .replace(/\s+/g, ' ')
    .trim();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function sendProgressNotification(item, newEpisode) {
  try {
    chrome.notifications.create({
      type: 'basic',
      iconUrl: 'icons/icon48.png',
      title: '–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω üìà',
      message: `${item.rawTitle || item.title}: —ç–ø–∏–∑–æ–¥ ${newEpisode}`,
      priority: 1
    });
    
    console.log(`[AniTracker] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${item.rawTitle || item.title} - —ç–ø–∏–∑–æ–¥ ${newEpisode}`);
  } catch (error) {
    console.log('[AniTracker] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  console.log('[AniTracker] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message.type);
  
  if (message.type === 'dom_detected') {
    const data = {
      ...message.data,
      timestamp: Date.now(),
      url: sender.tab?.url || 'unknown',
      tabId: sender.tab?.id
    };
    
    console.log('[AniTracker] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞–Ω–∏–º–µ:', data);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∞–Ω–∏–º–µ
    chrome.storage.local.set({ currentAnime: data });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    chrome.storage.local.get(['watchHistory'], (result) => {
      const history = result.watchHistory || [];
      
      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏
      const historyItem = {
        ...data,
        id: Date.now().toString() + Math.random().toString(36).substr(2, 9)
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞ (–Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ —Å–Ω–∞—á–∞–ª–∞)
      history.unshift(historyItem);
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
      if (history.length > 1000) {
        history.length = 1000;
      }
      
      chrome.storage.local.set({ watchHistory: history }, () => {
        console.log('[AniTracker] –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏—é, –≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:', history.length);
      });
    });
    
    // –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ö–û–î: –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    updateTrackingProgress(data);
    
    sendResponse({ status: 'success', message: '–î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã' });
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç popup
  if (message.type === 'get_data') {
    chrome.storage.local.get(['currentAnime', 'watchHistory', 'trackingList'], (result) => {
      sendResponse(result);
    });
    return true; // –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
  }
  
  if (message.type === 'clear_history') {
    chrome.storage.local.set({ watchHistory: [] }, () => {
      sendResponse({ status: 'success' });
    });
    return true;
  }
  
  if (message.type === 'clear_tracking') {
    chrome.storage.local.set({ trackingList: [] }, () => {
      sendResponse({ status: 'success' });
    });
    return true;
  }
  
  if (message.type === 'update_settings') {
    chrome.storage.local.set({ settings: message.settings }, () => {
      sendResponse({ status: 'success' });
    });
    return true;
  }
  
  return true; // –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫ (–¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {
  // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
  if (changeInfo.status === 'complete' && tab.url) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∏–º–µ
    const isAnimeSite = isAnimeStreamingSite(tab.url);
    
    if (isAnimeSite) {
      console.log('[AniTracker] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∏–º–µ:', tab.url);
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
      setTimeout(() => {
        // –ó–∞–ø—É—Å–∫–∞–µ–º content script –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        chrome.tabs.sendMessage(tabId, { type: 'page_loaded' }, (response) => {
          if (chrome.runtime.lastError) {
            // Content script –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            console.log('[AniTracker] Content script –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
          }
        });
      }, 2000);
    }
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–Ω–∏–º–µ-—Å–∞–π—Ç–æ–≤
function isAnimeStreamingSite(url) {
  const animeDomains = [
    'animego.org', 'animego.me', 'jut.su', 'anilibria.tv', 
    'shikimori.one', 'shikimori.ani', 'aniwatch.tv', 'anime365.org',
    'smotret-anime.online', 'yummyanime.club', 'animevost.org'
  ];
  
  try {
    const domain = new URL(url).hostname.toLowerCase();
    return animeDomains.some(animeDomain => domain.includes(animeDomain));
  } catch {
    return false;
  }
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ (—Ä–∞–∑ –≤ –¥–µ–Ω—å)
chrome.alarms.create('cleanupHistory', { periodInMinutes: 1440 }); // 24 —á–∞—Å–∞

chrome.alarms.onAlarm.addListener((alarm) => {
  if (alarm.name === 'cleanupHistory') {
    cleanupOldHistory();
  }
});

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏
function cleanupOldHistory() {
  chrome.storage.local.get(['watchHistory', 'settings'], (result) => {
    const history = result.watchHistory || [];
    const settings = result.settings || {};
    const maxItems = settings.maxHistoryItems || 1000;
    
    if (history.length > maxItems) {
      const cleanedHistory = history.slice(0, maxItems);
      chrome.storage.local.set({ watchHistory: cleanedHistory }, () => {
        console.log(`[AniTracker] –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞, –æ—Å—Ç–∞–≤–ª–µ–Ω–æ ${cleanedHistory.length} –∑–∞–ø–∏—Å–µ–π`);
      });
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
chrome.runtime.onStartup.addListener(() => {
  console.log('[AniTracker] –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ');
});